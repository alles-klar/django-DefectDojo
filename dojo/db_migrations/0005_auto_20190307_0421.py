# Generated by Django 2.0.10 on 2019-03-07 09:21

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields


class Migration(migrations.Migration):

    dependencies = [
        ('dojo', '0004_auto_20190307_0338'),
    ]

    operations = [
        migrations.AlterField(
            model_name='alerts',
            name='icon',
            field=models.CharField(default='icon-user-check', max_length=25),
        ),
        migrations.AlterField(
            model_name='alerts',
            name='source',
            field=models.CharField(default='Generic', max_length=100),
        ),
        migrations.AlterField(
            model_name='alerts',
            name='title',
            field=models.CharField(default='', max_length=100),
        ),
        migrations.AlterField(
            model_name='app_analysis',
            name='confidence',
            field=models.IntegerField(blank=True, null=True, verbose_name='Confidence level'),
        ),
        migrations.AlterField(
            model_name='app_analysis',
            name='version',
            field=models.CharField(blank=True, max_length=200, null=True, verbose_name='Version Number'),
        ),
        migrations.AlterField(
            model_name='benchmark_category',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Benchmark_Type', verbose_name='Benchmark Type'),
        ),
        migrations.AlterField(
            model_name='benchmark_product',
            name='enabled',
            field=models.BooleanField(default=True, help_text='Applicable for this specific product.'),
        ),
        migrations.AlterField(
            model_name='benchmark_product',
            name='pass_fail',
            field=models.BooleanField(default=False, help_text='Does the product meet the requirement?', verbose_name='Pass'),
        ),
        migrations.AlterField(
            model_name='benchmark_product_summary',
            name='asvs_level_1_benchmark',
            field=models.IntegerField(default=0, help_text='Total number of active benchmarks for this application.'),
        ),
        migrations.AlterField(
            model_name='benchmark_product_summary',
            name='asvs_level_1_score',
            field=models.IntegerField(default=0, help_text='ASVS Level 1 Score'),
        ),
        migrations.AlterField(
            model_name='benchmark_product_summary',
            name='asvs_level_2_benchmark',
            field=models.IntegerField(default=0, help_text='Total number of active benchmarks for this application.'),
        ),
        migrations.AlterField(
            model_name='benchmark_product_summary',
            name='asvs_level_2_score',
            field=models.IntegerField(default=0, help_text='ASVS Level 2 Score'),
        ),
        migrations.AlterField(
            model_name='benchmark_product_summary',
            name='asvs_level_3_benchmark',
            field=models.IntegerField(default=0, help_text='Total number of active benchmarks for this application.'),
        ),
        migrations.AlterField(
            model_name='benchmark_product_summary',
            name='asvs_level_3_score',
            field=models.IntegerField(default=0, help_text='ASVS Level 3 Score'),
        ),
        migrations.AlterField(
            model_name='benchmark_product_summary',
            name='current_level',
            field=models.CharField(blank=True, choices=[('Level 1', 'Level 1'), ('Level 2', 'Level 2'), ('Level 3', 'Level 3')], default='None', max_length=15, null=True),
        ),
        migrations.AlterField(
            model_name='benchmark_product_summary',
            name='desired_level',
            field=models.CharField(choices=[('Level 1', 'Level 1'), ('Level 2', 'Level 2'), ('Level 3', 'Level 3')], default='Level 1', max_length=15),
        ),
        migrations.AlterField(
            model_name='benchmark_product_summary',
            name='publish',
            field=models.BooleanField(default=False, help_text='Publish score to Product.'),
        ),
        migrations.AlterField(
            model_name='benchmark_type',
            name='benchmark_source',
            field=models.CharField(choices=[('PCI', 'PCI'), ('OWASP ASVS', 'OWASP ASVS'), ('OWASP Mobile ASVS', 'OWASP Mobile ASVS')], default='OWASP ASVS', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='check_list',
            name='authentication',
            field=models.CharField(default='none', max_length=50),
        ),
        migrations.AlterField(
            model_name='check_list',
            name='authorization_and_access_control',
            field=models.CharField(default='none', max_length=50),
        ),
        migrations.AlterField(
            model_name='check_list',
            name='configuration_management',
            field=models.CharField(default='', max_length=50),
        ),
        migrations.AlterField(
            model_name='check_list',
            name='data_input_sanitization_validation',
            field=models.CharField(default='none', max_length=50),
        ),
        migrations.AlterField(
            model_name='check_list',
            name='encryption_crypto',
            field=models.CharField(default='none', max_length=50),
        ),
        migrations.AlterField(
            model_name='check_list',
            name='other',
            field=models.CharField(default='none', max_length=50),
        ),
        migrations.AlterField(
            model_name='check_list',
            name='sensitive_data',
            field=models.CharField(default='none', max_length=50),
        ),
        migrations.AlterField(
            model_name='check_list',
            name='session_management',
            field=models.CharField(default='none', max_length=50),
        ),
        migrations.AlterField(
            model_name='child_rule',
            name='match_field',
            field=models.CharField(choices=[('id', 'id'), ('title', 'title'), ('date', 'date'), ('cwe', 'cwe'), ('url', 'url'), ('severity', 'severity'), ('description', 'description'), ('mitigation', 'mitigation'), ('impact', 'impact'), ('steps_to_reproduce', 'steps_to_reproduce'), ('severity_justification', 'severity_justification'), ('references', 'references'), ('test', 'test'), ('is_template', 'is_template'), ('active', 'active'), ('verified', 'verified'), ('false_p', 'false_p'), ('duplicate', 'duplicate'), ('duplicate_finding', 'duplicate_finding'), ('out_of_scope', 'out_of_scope'), ('under_review', 'under_review'), ('review_requested_by', 'review_requested_by'), ('under_defect_review', 'under_defect_review'), ('defect_review_requested_by', 'defect_review_requested_by'), ('thread_id', 'thread_id'), ('mitigated', 'mitigated'), ('mitigated_by', 'mitigated_by'), ('reporter', 'reporter'), ('numerical_severity', 'numerical_severity'), ('last_reviewed', 'last_reviewed'), ('last_reviewed_by', 'last_reviewed_by'), ('line_number', 'line_number'), ('sourcefilepath', 'sourcefilepath'), ('sourcefile', 'sourcefile'), ('param', 'param'), ('payload', 'payload'), ('hash_code', 'hash_code'), ('line', 'line'), ('file_path', 'file_path'), ('static_finding', 'static_finding'), ('dynamic_finding', 'dynamic_finding'), ('created', 'created'), ('scanner_confidence', 'scanner_confidence')], max_length=200),
        ),
        migrations.AlterField(
            model_name='child_rule',
            name='model_object',
            field=models.CharField(choices=[('Finding', 'Finding')], max_length=30),
        ),
        migrations.AlterField(
            model_name='child_rule',
            name='operator',
            field=models.CharField(choices=[('Matches', 'Matches'), ('Contains', 'Contains')], max_length=30),
        ),
        migrations.AlterField(
            model_name='cred_mapping',
            name='cred_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cred_user', to='dojo.Cred_User', verbose_name='Credential'),
        ),
        migrations.AlterField(
            model_name='cred_mapping',
            name='is_authn_provider',
            field=models.BooleanField(default=False, verbose_name='Authentication Provider'),
        ),
        migrations.AlterField(
            model_name='cred_user',
            name='authentication',
            field=models.CharField(choices=[('Form', 'Form Authentication'), ('SSO', 'SSO Redirect')], default='Form', max_length=15),
        ),
        migrations.AlterField(
            model_name='cred_user',
            name='http_authentication',
            field=models.CharField(blank=True, choices=[('Basic', 'Basic'), ('NTLM', 'NTLM')], max_length=15, null=True),
        ),
        migrations.AlterField(
            model_name='cred_user',
            name='is_valid',
            field=models.BooleanField(default=True, verbose_name='Login is valid'),
        ),
        migrations.AlterField(
            model_name='endpoint',
            name='fragment',
            field=models.CharField(blank=True, help_text="The fragment identifier which follows the hash mark. The hash mark should be omitted. For example 'section-13', 'paragraph-2'.", max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='endpoint',
            name='host',
            field=models.CharField(blank=True, help_text="The host name or IP address, you can also include the port number. For example'127.0.0.1', '127.0.0.1:8080', 'localhost', 'yourdomain.com'.", max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='endpoint',
            name='path',
            field=models.CharField(blank=True, help_text="The location of the resource, it should start with a '/'. For example/endpoint/420/edit", max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='endpoint',
            name='port',
            field=models.IntegerField(blank=True, help_text='The network port associated with the endpoint.', null=True),
        ),
        migrations.AlterField(
            model_name='endpoint',
            name='protocol',
            field=models.CharField(blank=True, help_text="The communication protocol such as 'http', 'ftp', etc.", max_length=10, null=True),
        ),
        migrations.AlterField(
            model_name='endpoint',
            name='query',
            field=models.CharField(blank=True, help_text="The query string, the question mark should be omitted.For example 'group=4&team=8'", max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='endpoint_params',
            name='method',
            field=models.CharField(choices=[('GET', 'GET'), ('POST', 'POST')], max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='branch_tag',
            field=models.CharField(blank=True, help_text='Tag or branch of the product the engagement tested.', max_length=150, null=True, verbose_name='Branch/Tag'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='build_id',
            field=models.CharField(blank=True, help_text='Build ID of the product the engagement tested.', max_length=150, null=True, verbose_name='Build ID'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='build_server',
            field=models.ForeignKey(blank=True, help_text='Build server responsible for CI/CD test', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='build_server', to='dojo.Tool_Configuration', verbose_name='Build Server'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='commit_hash',
            field=models.CharField(blank=True, help_text='Commit hash from repo', max_length=150, null=True, verbose_name='Commit Hash'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='engagement_type',
            field=models.CharField(choices=[('Interactive', 'Interactive'), ('CI/CD', 'CI/CD')], default='Interactive', max_length=30, null=True),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='orchestration_engine',
            field=models.ForeignKey(blank=True, help_text='Orchestration service responsible for CI/CD test', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orchestration', to='dojo.Tool_Configuration', verbose_name='Orchestration Engine'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='preset',
            field=models.ForeignKey(blank=True, help_text='Settings and notes for performing this engagement.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Engagement_Presets'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='progress',
            field=models.CharField(default='threat_model', editable=False, max_length=100),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='risk_path',
            field=models.CharField(blank=True, default='none', editable=False, max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='source_code_management_server',
            field=models.ForeignKey(blank=True, help_text='Source code server for CI/CD test', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='source_code_management_server', to='dojo.Tool_Configuration', verbose_name='SCM Server'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='source_code_management_uri',
            field=models.CharField(blank=True, help_text='Resource link to source code', max_length=600, null=True, verbose_name='Repo'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='status',
            field=models.CharField(choices=[('Not Started', 'Not Started'), ('Blocked', 'Blocked'), ('Cancelled', 'Cancelled'), ('Completed', 'Completed'), ('In Progress', 'In Progress'), ('On Hold', 'On Hold'), ('Waiting for Resource', 'Waiting for Resource')], default='', max_length=2000, null=True),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='tmodel_path',
            field=models.CharField(blank=True, default='none', editable=False, max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='tracker',
            field=models.URLField(blank=True, help_text='Link to epic or ticket system with changes to version.', null=True),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='version',
            field=models.CharField(blank=True, help_text='Version of the product the engagement tested.', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='engagement_presets',
            name='notes',
            field=models.CharField(blank=True, help_text='Description of what needs to be tested or setting up environment for testing', max_length=2000, null=True),
        ),
        migrations.AlterField(
            model_name='engagement_presets',
            name='scope',
            field=models.CharField(blank=True, default=None, help_text="Scope of Engagement testing, IP's/Resources/URL's)", max_length=800),
        ),
        migrations.AlterField(
            model_name='engagement_presets',
            name='title',
            field=models.CharField(default=None, help_text='Brief description of preset.', max_length=500),
        ),
        migrations.AlterField(
            model_name='fieldrule',
            name='update_type',
            field=models.CharField(choices=[('Append', 'Append'), ('Replace', 'Replace')], max_length=30),
        ),
        migrations.AlterField(
            model_name='finding',
            name='false_p',
            field=models.BooleanField(default=False, verbose_name='False Positive'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='line',
            field=models.IntegerField(blank=True, null=True, verbose_name='Line number'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='references',
            field=models.TextField(blank=True, db_column='refs', null=True),
        ),
        migrations.AlterField(
            model_name='finding',
            name='scanner_confidence',
            field=models.IntegerField(blank=True, default=None, editable=False, help_text='Confidence level of vulnerability which is supplied by the scannner.', null=True),
        ),
        migrations.AlterField(
            model_name='finding',
            name='severity',
            field=models.CharField(help_text='The severity level of this flaw (Critical, High, Medium, Low, Informational)', max_length=200),
        ),
        migrations.AlterField(
            model_name='finding_template',
            name='references',
            field=models.TextField(blank=True, db_column='refs', null=True),
        ),
        migrations.AlterField(
            model_name='finding_template',
            name='template_match',
            field=models.BooleanField(default=False, help_text='Enables this template for matching remediation advice. Match will be applied to all active, verified findings by CWE.', verbose_name='Template Match Enabled'),
        ),
        migrations.AlterField(
            model_name='finding_template',
            name='template_match_title',
            field=models.BooleanField(default=False, help_text='Matches by title text (contains search) and CWE.', verbose_name='Match Template by Title and CWE'),
        ),
        migrations.AlterField(
            model_name='findingimage',
            name='image',
            field=models.ImageField(null=True, upload_to='finding_images'),
        ),
        migrations.AlterField(
            model_name='findingimageaccesstoken',
            name='size',
            field=models.CharField(choices=[('small', 'Small'), ('medium', 'Medium'), ('large', 'Large'), ('thumbnail', 'Thumbnail'), ('original', 'Original')], default='medium', max_length=9),
        ),
        migrations.AlterField(
            model_name='ipscan',
            name='address',
            field=models.TextField(default='none', editable=False),
        ),
        migrations.AlterField(
            model_name='jira_conf',
            name='close_status_key',
            field=models.IntegerField(help_text="To obtain the 'open status key' visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields"),
        ),
        migrations.AlterField(
            model_name='jira_conf',
            name='critical_mapping_severity',
            field=models.CharField(help_text="Maps to the 'Priority' field in Jira. For example: Critical", max_length=200),
        ),
        migrations.AlterField(
            model_name='jira_conf',
            name='default_issue_type',
            field=models.CharField(choices=[('Task', 'Task'), ('Story', 'Story'), ('Epic', 'Epic'), ('Spike', 'Spike'), ('Bug', 'Bug')], default='Bug', max_length=9),
        ),
        migrations.AlterField(
            model_name='jira_conf',
            name='epic_name_id',
            field=models.IntegerField(help_text="To obtain the 'Epic name id' visit https://<YOUR JIRA URL>/rest/api/2/field and search for Epic Name. Copy the number out of cf[number] and paste it here."),
        ),
        migrations.AlterField(
            model_name='jira_conf',
            name='finding_text',
            field=models.TextField(blank=True, help_text='Additional text that will be added to the finding in Jira. For example including how the finding was created or who to contact for more information.', null=True),
        ),
        migrations.AlterField(
            model_name='jira_conf',
            name='high_mapping_severity',
            field=models.CharField(help_text="Maps to the 'Priority' field in Jira. For example: High", max_length=200),
        ),
        migrations.AlterField(
            model_name='jira_conf',
            name='low_mapping_severity',
            field=models.CharField(help_text="Maps to the 'Priority' field in Jira. For example: Low", max_length=200),
        ),
        migrations.AlterField(
            model_name='jira_conf',
            name='medium_mapping_severity',
            field=models.CharField(help_text="Maps to the 'Priority' field in Jira. For example: Medium", max_length=200),
        ),
        migrations.AlterField(
            model_name='jira_conf',
            name='open_status_key',
            field=models.IntegerField(help_text="To obtain the 'open status key' visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields"),
        ),
        migrations.AlterField(
            model_name='jira_conf',
            name='url',
            field=models.URLField(help_text='For configuring Jira, view: https://defectdojo.readthedocs.io/en/latest/features.html#jira-integration', max_length=2000, verbose_name='JIRA URL'),
        ),
        migrations.AlterField(
            model_name='jira_pkey',
            name='conf',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.JIRA_Conf', verbose_name='JIRA Configuration'),
        ),
        migrations.AlterField(
            model_name='language_type',
            name='color',
            field=models.CharField(max_length=7, null=True, verbose_name='HTML color'),
        ),
        migrations.AlterField(
            model_name='languages',
            name='blank',
            field=models.IntegerField(blank=True, null=True, verbose_name='Number of blank lines'),
        ),
        migrations.AlterField(
            model_name='languages',
            name='code',
            field=models.IntegerField(blank=True, null=True, verbose_name='Number of code lines'),
        ),
        migrations.AlterField(
            model_name='languages',
            name='comment',
            field=models.IntegerField(blank=True, null=True, verbose_name='Number of comment lines'),
        ),
        migrations.AlterField(
            model_name='languages',
            name='files',
            field=models.IntegerField(blank=True, null=True, verbose_name='Number of files'),
        ),
        migrations.AlterField(
            model_name='network_locations',
            name='location',
            field=models.CharField(help_text='Location of network testing: Examples: VPN, Internet or Internal.', max_length=500),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='auto_close_engagement',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('hipchat', 'hipchat'), ('mail', 'mail'), ('alert', 'alert')], default='alert', max_length=24),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='code_review',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('hipchat', 'hipchat'), ('mail', 'mail'), ('alert', 'alert')], default='alert', max_length=24),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='engagement_added',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('hipchat', 'hipchat'), ('mail', 'mail'), ('alert', 'alert')], default='alert', max_length=24),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='jira_update',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('hipchat', 'hipchat'), ('mail', 'mail'), ('alert', 'alert')], default='alert', max_length=24),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='other',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('hipchat', 'hipchat'), ('mail', 'mail'), ('alert', 'alert')], default='alert', max_length=24),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='product_added',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('hipchat', 'hipchat'), ('mail', 'mail'), ('alert', 'alert')], default='alert', max_length=24),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='report_created',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('hipchat', 'hipchat'), ('mail', 'mail'), ('alert', 'alert')], default='alert', max_length=24),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='results_added',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('hipchat', 'hipchat'), ('mail', 'mail'), ('alert', 'alert')], default='alert', max_length=24),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='review_requested',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('hipchat', 'hipchat'), ('mail', 'mail'), ('alert', 'alert')], default='alert', max_length=24),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='stale_engagement',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('hipchat', 'hipchat'), ('mail', 'mail'), ('alert', 'alert')], default='alert', max_length=24),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='test_added',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('hipchat', 'hipchat'), ('mail', 'mail'), ('alert', 'alert')], default='alert', max_length=24),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='upcoming_engagement',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('hipchat', 'hipchat'), ('mail', 'mail'), ('alert', 'alert')], default='alert', max_length=24),
        ),
        migrations.AlterField(
            model_name='notifications',
            name='user_mentioned',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('slack', 'slack'), ('hipchat', 'hipchat'), ('mail', 'mail'), ('alert', 'alert')], default='alert', max_length=24),
        ),
        migrations.AlterField(
            model_name='objects',
            name='artifact',
            field=models.CharField(blank=True, max_length=400, null=True, verbose_name='Artifact'),
        ),
        migrations.AlterField(
            model_name='objects',
            name='folder',
            field=models.CharField(blank=True, max_length=400, null=True, verbose_name='Folder'),
        ),
        migrations.AlterField(
            model_name='objects',
            name='path',
            field=models.CharField(blank=True, max_length=600, null=True, verbose_name='Full file path'),
        ),
        migrations.AlterField(
            model_name='product',
            name='business_criticality',
            field=models.CharField(blank=True, choices=[('very high', 'Very High'), ('high', 'High'), ('medium', 'Medium'), ('low', 'Low'), ('very low', 'Very Low'), ('none', 'None')], max_length=9, null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='external_audience',
            field=models.BooleanField(default=False, help_text='Specify if the application is used by people outside the organization.'),
        ),
        migrations.AlterField(
            model_name='product',
            name='internet_accessible',
            field=models.BooleanField(default=False, help_text='Specify if the application is accessible from the public internet.'),
        ),
        migrations.AlterField(
            model_name='product',
            name='lifecycle',
            field=models.CharField(blank=True, choices=[('construction', 'Construction'), ('production', 'Production'), ('retirement', 'Retirement')], max_length=12, null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='origin',
            field=models.CharField(blank=True, choices=[('third party library', 'Third Party Library'), ('purchased', 'Purchased'), ('contractor', 'Contractor Developed'), ('internal', 'Internally Developed'), ('open source', 'Open Source'), ('outsourced', 'Outsourced')], max_length=19, null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='platform',
            field=models.CharField(blank=True, choices=[('web service', 'API'), ('desktop', 'Desktop'), ('iot', 'Internet of Things'), ('mobile', 'Mobile'), ('web', 'Web')], max_length=11, null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='revenue',
            field=models.DecimalField(blank=True, decimal_places=2, help_text="Estimate the application's revenue.", max_digits=15, null=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='user_records',
            field=models.PositiveIntegerField(blank=True, help_text='Estimate the number of user records within the application.', null=True),
        ),
        migrations.AlterField(
            model_name='regulation',
            name='acronym',
            field=models.CharField(help_text='A shortened representation of the name.', max_length=20, unique=True),
        ),
        migrations.AlterField(
            model_name='regulation',
            name='category',
            field=models.CharField(choices=[('privacy', 'Privacy'), ('finance', 'Finance'), ('education', 'Education'), ('medical', 'Medical'), ('other', 'Other')], help_text='The subject of the regulation.', max_length=9),
        ),
        migrations.AlterField(
            model_name='regulation',
            name='description',
            field=models.TextField(blank=True, help_text="Information about the regulation's purpose."),
        ),
        migrations.AlterField(
            model_name='regulation',
            name='jurisdiction',
            field=models.CharField(help_text='The territory over which the regulation applies.', max_length=64),
        ),
        migrations.AlterField(
            model_name='regulation',
            name='name',
            field=models.CharField(help_text='The name of the legislation.', max_length=128),
        ),
        migrations.AlterField(
            model_name='regulation',
            name='reference',
            field=models.URLField(blank=True, help_text='An external URL for more information.'),
        ),
        migrations.AlterField(
            model_name='report',
            name='file',
            field=models.FileField(null=True, upload_to='reports/%Y/%m/%d', verbose_name='Report File'),
        ),
        migrations.AlterField(
            model_name='report',
            name='format',
            field=models.CharField(default='AsciiDoc', max_length=15),
        ),
        migrations.AlterField(
            model_name='report',
            name='status',
            field=models.CharField(default='requested', max_length=10),
        ),
        migrations.AlterField(
            model_name='report',
            name='type',
            field=models.CharField(default='Finding', max_length=100),
        ),
        migrations.AlterField(
            model_name='risk_acceptance',
            name='accepted_by',
            field=models.CharField(blank=True, default=None, help_text='The entity or person that accepts the risk.', max_length=200, null=True, verbose_name='Accepted By'),
        ),
        migrations.AlterField(
            model_name='risk_acceptance',
            name='compensating_control',
            field=models.TextField(blank=True, default=None, help_text='If a compensating control exists to mitigate the finding or reduce risk, then list the compensating control(s).', null=True),
        ),
        migrations.AlterField(
            model_name='risk_acceptance',
            name='path',
            field=models.FileField(editable=False, upload_to='risk/%Y/%m/%d', verbose_name='Risk Acceptance File'),
        ),
        migrations.AlterField(
            model_name='rule',
            name='application',
            field=models.CharField(choices=[('Append', 'Append'), ('Replace', 'Replace')], max_length=200),
        ),
        migrations.AlterField(
            model_name='rule',
            name='applied_field',
            field=models.CharField(choices=[('id', 'id'), ('title', 'title'), ('date', 'date'), ('cwe', 'cwe'), ('url', 'url'), ('severity', 'severity'), ('description', 'description'), ('mitigation', 'mitigation'), ('impact', 'impact'), ('steps_to_reproduce', 'steps_to_reproduce'), ('severity_justification', 'severity_justification'), ('references', 'references'), ('test', 'test'), ('is_template', 'is_template'), ('active', 'active'), ('verified', 'verified'), ('false_p', 'false_p'), ('duplicate', 'duplicate'), ('duplicate_finding', 'duplicate_finding'), ('out_of_scope', 'out_of_scope'), ('under_review', 'under_review'), ('review_requested_by', 'review_requested_by'), ('under_defect_review', 'under_defect_review'), ('defect_review_requested_by', 'defect_review_requested_by'), ('thread_id', 'thread_id'), ('mitigated', 'mitigated'), ('mitigated_by', 'mitigated_by'), ('reporter', 'reporter'), ('numerical_severity', 'numerical_severity'), ('last_reviewed', 'last_reviewed'), ('last_reviewed_by', 'last_reviewed_by'), ('line_number', 'line_number'), ('sourcefilepath', 'sourcefilepath'), ('sourcefile', 'sourcefile'), ('param', 'param'), ('payload', 'payload'), ('hash_code', 'hash_code'), ('line', 'line'), ('file_path', 'file_path'), ('static_finding', 'static_finding'), ('dynamic_finding', 'dynamic_finding'), ('created', 'created'), ('scanner_confidence', 'scanner_confidence')], max_length=200),
        ),
        migrations.AlterField(
            model_name='rule',
            name='applies_to',
            field=models.CharField(choices=[('Finding', 'Finding')], max_length=30),
        ),
        migrations.AlterField(
            model_name='rule',
            name='match_field',
            field=models.CharField(choices=[('id', 'id'), ('title', 'title'), ('date', 'date'), ('cwe', 'cwe'), ('url', 'url'), ('severity', 'severity'), ('description', 'description'), ('mitigation', 'mitigation'), ('impact', 'impact'), ('steps_to_reproduce', 'steps_to_reproduce'), ('severity_justification', 'severity_justification'), ('references', 'references'), ('test', 'test'), ('is_template', 'is_template'), ('active', 'active'), ('verified', 'verified'), ('false_p', 'false_p'), ('duplicate', 'duplicate'), ('duplicate_finding', 'duplicate_finding'), ('out_of_scope', 'out_of_scope'), ('under_review', 'under_review'), ('review_requested_by', 'review_requested_by'), ('under_defect_review', 'under_defect_review'), ('defect_review_requested_by', 'defect_review_requested_by'), ('thread_id', 'thread_id'), ('mitigated', 'mitigated'), ('mitigated_by', 'mitigated_by'), ('reporter', 'reporter'), ('numerical_severity', 'numerical_severity'), ('last_reviewed', 'last_reviewed'), ('last_reviewed_by', 'last_reviewed_by'), ('line_number', 'line_number'), ('sourcefilepath', 'sourcefilepath'), ('sourcefile', 'sourcefile'), ('param', 'param'), ('payload', 'payload'), ('hash_code', 'hash_code'), ('line', 'line'), ('file_path', 'file_path'), ('static_finding', 'static_finding'), ('dynamic_finding', 'dynamic_finding'), ('created', 'created'), ('scanner_confidence', 'scanner_confidence')], max_length=200),
        ),
        migrations.AlterField(
            model_name='rule',
            name='model_object',
            field=models.CharField(choices=[('Finding', 'Finding')], max_length=30),
        ),
        migrations.AlterField(
            model_name='rule',
            name='operator',
            field=models.CharField(choices=[('Matches', 'Matches'), ('Contains', 'Contains')], max_length=30),
        ),
        migrations.AlterField(
            model_name='scan',
            name='baseline',
            field=models.BooleanField(default=False, verbose_name='Current Baseline'),
        ),
        migrations.AlterField(
            model_name='scan',
            name='protocol',
            field=models.CharField(default='TCP', max_length=10),
        ),
        migrations.AlterField(
            model_name='scan',
            name='status',
            field=models.CharField(default='Pending', editable=False, max_length=10),
        ),
        migrations.AlterField(
            model_name='scansettings',
            name='addresses',
            field=models.TextField(default='none'),
        ),
        migrations.AlterField(
            model_name='scansettings',
            name='protocol',
            field=models.CharField(default='TCP', max_length=10),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='display_endpoint_uri',
            field=models.BooleanField(default=False, help_text='Displays the full endpoint URI in the endpoint view.', verbose_name='Display Endpoint Full URI'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_benchmark',
            field=models.BooleanField(default=True, help_text='Enables Benchmarks such as the OWASP ASVS (Application Security Verification Standard)', verbose_name='Enable Benchmarks'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_deduplication',
            field=models.BooleanField(default=False, help_text='With this setting turned on, Dojo deduplicates findings by comparing endpoints, cwe fields, and titles. If two findings share a URL and have the same CWE or title, Dojo marks the less recent finding as a duplicate. When deduplication is enabled, a list of deduplicated findings is added to the engagement view.', verbose_name='Deduplicate findings'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_finding_sla',
            field=models.BooleanField(default=True, help_text="Enables Finding SLA's for time to remediate.", verbose_name="Enable Finding SLA's"),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_hipchat_notifications',
            field=models.BooleanField(default=False, verbose_name='Enable HipChat notifications'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_jira',
            field=models.BooleanField(default=False, verbose_name='Enable JIRA integration'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_jira_web_hook',
            field=models.BooleanField(default=False, verbose_name='Enable JIRA web hook. Please note: It is strongly recommended to whitelist the Jira server using a proxy such as Nginx.'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_product_grade',
            field=models.BooleanField(default=False, help_text='Displays a grade letter next to a product to show the overall health.', verbose_name='Enable Product Grading'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_slack_notifications',
            field=models.BooleanField(default=False, verbose_name='Enable Slack notifications'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='enable_template_match',
            field=models.BooleanField(default=False, help_text='Enables global remediation advice and matching on CWE and Title. The text will be replaced for mitigation, impact and references on a finding. Useful for providing consistent impact and remediation advice regardless of the scanner.', verbose_name='Enable Remediation Advice'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='engagement_auto_close',
            field=models.BooleanField(default=False, help_text='Closes an engagement after 3 days (default) past due date including last update.', verbose_name='Enable Engagement Auto-Close'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='engagement_auto_close_days',
            field=models.IntegerField(default=3, help_text='Closes an engagement after the specified number of days past due date including last update.', verbose_name='Engagement Auto-Close Days'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='false_positive_history',
            field=models.BooleanField(default=False, help_text='DefectDojo will automatically mark the finding as a false positive if the finding has been previously marked as a false positive.'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='hipchat_channel',
            field=models.CharField(blank=True, default='', max_length=100),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='hipchat_site',
            field=models.CharField(blank=True, default='', help_text='The full fqdn of your hipchat site, e.g. "yoursite.hipchat.com"', max_length=100),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='hipchat_token',
            field=models.CharField(blank=True, default='', help_text='Token required for interacting with HipChat. Get one at https://patriktest.hipchat.com/addons/', max_length=100),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='jira_labels',
            field=models.CharField(blank=True, help_text='JIRA issue labels space seperated', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='jira_minimum_severity',
            field=models.CharField(blank=True, choices=[('Critical', 'Critical'), ('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], default='None', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='mail_notifications_from',
            field=models.CharField(blank=True, default='from@example.com', max_length=200),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='mail_notifications_to',
            field=models.CharField(blank=True, default='', max_length=200),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='max_dupes',
            field=models.IntegerField(blank=True, help_text='When enabled, if a single issue reaches the maximum number of duplicates, the oldest will be deleted.', null=True, verbose_name='Max Duplicates'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='product_grade_a',
            field=models.IntegerField(default=90, help_text="Percentage score for an 'A' >=", verbose_name='Grade A'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='product_grade_b',
            field=models.IntegerField(default=80, help_text="Percentage score for a 'B' >=", verbose_name='Grade B'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='product_grade_c',
            field=models.IntegerField(default=70, help_text="Percentage score for a 'C' >=", verbose_name='Grade C'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='product_grade_d',
            field=models.IntegerField(default=60, help_text="Percentage score for a 'D' >=", verbose_name='Grade D'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='product_grade_f',
            field=models.IntegerField(default=59, help_text="Percentage score for an 'F' <=", verbose_name='Grade F'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='s_finding_severity_naming',
            field=models.BooleanField(default=False, help_text='With this setting turned on, Dojo will display S0, S1, S2, etc in most places, whereas if turned off Critical, High, Medium, etc will be displayed.'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='sla_critical',
            field=models.IntegerField(default=7, help_text='# of days to remediate a critical finding.', verbose_name='Crital Finding SLA Days'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='sla_high',
            field=models.IntegerField(default=30, help_text='# of days to remediate a high finding.', verbose_name='High Finding SLA Days'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='sla_low',
            field=models.IntegerField(default=120, help_text='# of days to remediate a low finding.', verbose_name='Low Finding SLA Days'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='sla_medium',
            field=models.IntegerField(default=90, help_text='# of days to remediate a medium finding.', verbose_name='Medium Finding SLA Days'),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='slack_channel',
            field=models.CharField(blank=True, default='', max_length=100),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='slack_token',
            field=models.CharField(blank=True, default='', help_text='Token required for interacting with Slack. Get one at https://api.slack.com/tokens', max_length=100),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='slack_username',
            field=models.CharField(blank=True, default='', max_length=100),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='team_name',
            field=models.CharField(blank=True, default='', max_length=100),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='time_zone',
            field=models.CharField(choices=[('Africa/Abidjan', 'Africa/Abidjan'), ('Africa/Accra', 'Africa/Accra'), ('Africa/Addis_Ababa', 'Africa/Addis_Ababa'), ('Africa/Algiers', 'Africa/Algiers'), ('Africa/Asmara', 'Africa/Asmara'), ('Africa/Asmera', 'Africa/Asmera'), ('Africa/Bamako', 'Africa/Bamako'), ('Africa/Bangui', 'Africa/Bangui'), ('Africa/Banjul', 'Africa/Banjul'), ('Africa/Bissau', 'Africa/Bissau'), ('Africa/Blantyre', 'Africa/Blantyre'), ('Africa/Brazzaville', 'Africa/Brazzaville'), ('Africa/Bujumbura', 'Africa/Bujumbura'), ('Africa/Cairo', 'Africa/Cairo'), ('Africa/Casablanca', 'Africa/Casablanca'), ('Africa/Ceuta', 'Africa/Ceuta'), ('Africa/Conakry', 'Africa/Conakry'), ('Africa/Dakar', 'Africa/Dakar'), ('Africa/Dar_es_Salaam', 'Africa/Dar_es_Salaam'), ('Africa/Djibouti', 'Africa/Djibouti'), ('Africa/Douala', 'Africa/Douala'), ('Africa/El_Aaiun', 'Africa/El_Aaiun'), ('Africa/Freetown', 'Africa/Freetown'), ('Africa/Gaborone', 'Africa/Gaborone'), ('Africa/Harare', 'Africa/Harare'), ('Africa/Johannesburg', 'Africa/Johannesburg'), ('Africa/Juba', 'Africa/Juba'), ('Africa/Kampala', 'Africa/Kampala'), ('Africa/Khartoum', 'Africa/Khartoum'), ('Africa/Kigali', 'Africa/Kigali'), ('Africa/Kinshasa', 'Africa/Kinshasa'), ('Africa/Lagos', 'Africa/Lagos'), ('Africa/Libreville', 'Africa/Libreville'), ('Africa/Lome', 'Africa/Lome'), ('Africa/Luanda', 'Africa/Luanda'), ('Africa/Lubumbashi', 'Africa/Lubumbashi'), ('Africa/Lusaka', 'Africa/Lusaka'), ('Africa/Malabo', 'Africa/Malabo'), ('Africa/Maputo', 'Africa/Maputo'), ('Africa/Maseru', 'Africa/Maseru'), ('Africa/Mbabane', 'Africa/Mbabane'), ('Africa/Mogadishu', 'Africa/Mogadishu'), ('Africa/Monrovia', 'Africa/Monrovia'), ('Africa/Nairobi', 'Africa/Nairobi'), ('Africa/Ndjamena', 'Africa/Ndjamena'), ('Africa/Niamey', 'Africa/Niamey'), ('Africa/Nouakchott', 'Africa/Nouakchott'), ('Africa/Ouagadougou', 'Africa/Ouagadougou'), ('Africa/Porto-Novo', 'Africa/Porto-Novo'), ('Africa/Sao_Tome', 'Africa/Sao_Tome'), ('Africa/Timbuktu', 'Africa/Timbuktu'), ('Africa/Tripoli', 'Africa/Tripoli'), ('Africa/Tunis', 'Africa/Tunis'), ('Africa/Windhoek', 'Africa/Windhoek'), ('America/Adak', 'America/Adak'), ('America/Anchorage', 'America/Anchorage'), ('America/Anguilla', 'America/Anguilla'), ('America/Antigua', 'America/Antigua'), ('America/Araguaina', 'America/Araguaina'), ('America/Argentina/Buenos_Aires', 'America/Argentina/Buenos_Aires'), ('America/Argentina/Catamarca', 'America/Argentina/Catamarca'), ('America/Argentina/ComodRivadavia', 'America/Argentina/ComodRivadavia'), ('America/Argentina/Cordoba', 'America/Argentina/Cordoba'), ('America/Argentina/Jujuy', 'America/Argentina/Jujuy'), ('America/Argentina/La_Rioja', 'America/Argentina/La_Rioja'), ('America/Argentina/Mendoza', 'America/Argentina/Mendoza'), ('America/Argentina/Rio_Gallegos', 'America/Argentina/Rio_Gallegos'), ('America/Argentina/Salta', 'America/Argentina/Salta'), ('America/Argentina/San_Juan', 'America/Argentina/San_Juan'), ('America/Argentina/San_Luis', 'America/Argentina/San_Luis'), ('America/Argentina/Tucuman', 'America/Argentina/Tucuman'), ('America/Argentina/Ushuaia', 'America/Argentina/Ushuaia'), ('America/Aruba', 'America/Aruba'), ('America/Asuncion', 'America/Asuncion'), ('America/Atikokan', 'America/Atikokan'), ('America/Atka', 'America/Atka'), ('America/Bahia', 'America/Bahia'), ('America/Bahia_Banderas', 'America/Bahia_Banderas'), ('America/Barbados', 'America/Barbados'), ('America/Belem', 'America/Belem'), ('America/Belize', 'America/Belize'), ('America/Blanc-Sablon', 'America/Blanc-Sablon'), ('America/Boa_Vista', 'America/Boa_Vista'), ('America/Bogota', 'America/Bogota'), ('America/Boise', 'America/Boise'), ('America/Buenos_Aires', 'America/Buenos_Aires'), ('America/Cambridge_Bay', 'America/Cambridge_Bay'), ('America/Campo_Grande', 'America/Campo_Grande'), ('America/Cancun', 'America/Cancun'), ('America/Caracas', 'America/Caracas'), ('America/Catamarca', 'America/Catamarca'), ('America/Cayenne', 'America/Cayenne'), ('America/Cayman', 'America/Cayman'), ('America/Chicago', 'America/Chicago'), ('America/Chihuahua', 'America/Chihuahua'), ('America/Coral_Harbour', 'America/Coral_Harbour'), ('America/Cordoba', 'America/Cordoba'), ('America/Costa_Rica', 'America/Costa_Rica'), ('America/Creston', 'America/Creston'), ('America/Cuiaba', 'America/Cuiaba'), ('America/Curacao', 'America/Curacao'), ('America/Danmarkshavn', 'America/Danmarkshavn'), ('America/Dawson', 'America/Dawson'), ('America/Dawson_Creek', 'America/Dawson_Creek'), ('America/Denver', 'America/Denver'), ('America/Detroit', 'America/Detroit'), ('America/Dominica', 'America/Dominica'), ('America/Edmonton', 'America/Edmonton'), ('America/Eirunepe', 'America/Eirunepe'), ('America/El_Salvador', 'America/El_Salvador'), ('America/Ensenada', 'America/Ensenada'), ('America/Fort_Nelson', 'America/Fort_Nelson'), ('America/Fort_Wayne', 'America/Fort_Wayne'), ('America/Fortaleza', 'America/Fortaleza'), ('America/Glace_Bay', 'America/Glace_Bay'), ('America/Godthab', 'America/Godthab'), ('America/Goose_Bay', 'America/Goose_Bay'), ('America/Grand_Turk', 'America/Grand_Turk'), ('America/Grenada', 'America/Grenada'), ('America/Guadeloupe', 'America/Guadeloupe'), ('America/Guatemala', 'America/Guatemala'), ('America/Guayaquil', 'America/Guayaquil'), ('America/Guyana', 'America/Guyana'), ('America/Halifax', 'America/Halifax'), ('America/Havana', 'America/Havana'), ('America/Hermosillo', 'America/Hermosillo'), ('America/Indiana/Indianapolis', 'America/Indiana/Indianapolis'), ('America/Indiana/Knox', 'America/Indiana/Knox'), ('America/Indiana/Marengo', 'America/Indiana/Marengo'), ('America/Indiana/Petersburg', 'America/Indiana/Petersburg'), ('America/Indiana/Tell_City', 'America/Indiana/Tell_City'), ('America/Indiana/Vevay', 'America/Indiana/Vevay'), ('America/Indiana/Vincennes', 'America/Indiana/Vincennes'), ('America/Indiana/Winamac', 'America/Indiana/Winamac'), ('America/Indianapolis', 'America/Indianapolis'), ('America/Inuvik', 'America/Inuvik'), ('America/Iqaluit', 'America/Iqaluit'), ('America/Jamaica', 'America/Jamaica'), ('America/Jujuy', 'America/Jujuy'), ('America/Juneau', 'America/Juneau'), ('America/Kentucky/Louisville', 'America/Kentucky/Louisville'), ('America/Kentucky/Monticello', 'America/Kentucky/Monticello'), ('America/Knox_IN', 'America/Knox_IN'), ('America/Kralendijk', 'America/Kralendijk'), ('America/La_Paz', 'America/La_Paz'), ('America/Lima', 'America/Lima'), ('America/Los_Angeles', 'America/Los_Angeles'), ('America/Louisville', 'America/Louisville'), ('America/Lower_Princes', 'America/Lower_Princes'), ('America/Maceio', 'America/Maceio'), ('America/Managua', 'America/Managua'), ('America/Manaus', 'America/Manaus'), ('America/Marigot', 'America/Marigot'), ('America/Martinique', 'America/Martinique'), ('America/Matamoros', 'America/Matamoros'), ('America/Mazatlan', 'America/Mazatlan'), ('America/Mendoza', 'America/Mendoza'), ('America/Menominee', 'America/Menominee'), ('America/Merida', 'America/Merida'), ('America/Metlakatla', 'America/Metlakatla'), ('America/Mexico_City', 'America/Mexico_City'), ('America/Miquelon', 'America/Miquelon'), ('America/Moncton', 'America/Moncton'), ('America/Monterrey', 'America/Monterrey'), ('America/Montevideo', 'America/Montevideo'), ('America/Montreal', 'America/Montreal'), ('America/Montserrat', 'America/Montserrat'), ('America/Nassau', 'America/Nassau'), ('America/New_York', 'America/New_York'), ('America/Nipigon', 'America/Nipigon'), ('America/Nome', 'America/Nome'), ('America/Noronha', 'America/Noronha'), ('America/North_Dakota/Beulah', 'America/North_Dakota/Beulah'), ('America/North_Dakota/Center', 'America/North_Dakota/Center'), ('America/North_Dakota/New_Salem', 'America/North_Dakota/New_Salem'), ('America/Ojinaga', 'America/Ojinaga'), ('America/Panama', 'America/Panama'), ('America/Pangnirtung', 'America/Pangnirtung'), ('America/Paramaribo', 'America/Paramaribo'), ('America/Phoenix', 'America/Phoenix'), ('America/Port-au-Prince', 'America/Port-au-Prince'), ('America/Port_of_Spain', 'America/Port_of_Spain'), ('America/Porto_Acre', 'America/Porto_Acre'), ('America/Porto_Velho', 'America/Porto_Velho'), ('America/Puerto_Rico', 'America/Puerto_Rico'), ('America/Punta_Arenas', 'America/Punta_Arenas'), ('America/Rainy_River', 'America/Rainy_River'), ('America/Rankin_Inlet', 'America/Rankin_Inlet'), ('America/Recife', 'America/Recife'), ('America/Regina', 'America/Regina'), ('America/Resolute', 'America/Resolute'), ('America/Rio_Branco', 'America/Rio_Branco'), ('America/Rosario', 'America/Rosario'), ('America/Santa_Isabel', 'America/Santa_Isabel'), ('America/Santarem', 'America/Santarem'), ('America/Santiago', 'America/Santiago'), ('America/Santo_Domingo', 'America/Santo_Domingo'), ('America/Sao_Paulo', 'America/Sao_Paulo'), ('America/Scoresbysund', 'America/Scoresbysund'), ('America/Shiprock', 'America/Shiprock'), ('America/Sitka', 'America/Sitka'), ('America/St_Barthelemy', 'America/St_Barthelemy'), ('America/St_Johns', 'America/St_Johns'), ('America/St_Kitts', 'America/St_Kitts'), ('America/St_Lucia', 'America/St_Lucia'), ('America/St_Thomas', 'America/St_Thomas'), ('America/St_Vincent', 'America/St_Vincent'), ('America/Swift_Current', 'America/Swift_Current'), ('America/Tegucigalpa', 'America/Tegucigalpa'), ('America/Thule', 'America/Thule'), ('America/Thunder_Bay', 'America/Thunder_Bay'), ('America/Tijuana', 'America/Tijuana'), ('America/Toronto', 'America/Toronto'), ('America/Tortola', 'America/Tortola'), ('America/Vancouver', 'America/Vancouver'), ('America/Virgin', 'America/Virgin'), ('America/Whitehorse', 'America/Whitehorse'), ('America/Winnipeg', 'America/Winnipeg'), ('America/Yakutat', 'America/Yakutat'), ('America/Yellowknife', 'America/Yellowknife'), ('Antarctica/Casey', 'Antarctica/Casey'), ('Antarctica/Davis', 'Antarctica/Davis'), ('Antarctica/DumontDUrville', 'Antarctica/DumontDUrville'), ('Antarctica/Macquarie', 'Antarctica/Macquarie'), ('Antarctica/Mawson', 'Antarctica/Mawson'), ('Antarctica/McMurdo', 'Antarctica/McMurdo'), ('Antarctica/Palmer', 'Antarctica/Palmer'), ('Antarctica/Rothera', 'Antarctica/Rothera'), ('Antarctica/South_Pole', 'Antarctica/South_Pole'), ('Antarctica/Syowa', 'Antarctica/Syowa'), ('Antarctica/Troll', 'Antarctica/Troll'), ('Antarctica/Vostok', 'Antarctica/Vostok'), ('Arctic/Longyearbyen', 'Arctic/Longyearbyen'), ('Asia/Aden', 'Asia/Aden'), ('Asia/Almaty', 'Asia/Almaty'), ('Asia/Amman', 'Asia/Amman'), ('Asia/Anadyr', 'Asia/Anadyr'), ('Asia/Aqtau', 'Asia/Aqtau'), ('Asia/Aqtobe', 'Asia/Aqtobe'), ('Asia/Ashgabat', 'Asia/Ashgabat'), ('Asia/Ashkhabad', 'Asia/Ashkhabad'), ('Asia/Atyrau', 'Asia/Atyrau'), ('Asia/Baghdad', 'Asia/Baghdad'), ('Asia/Bahrain', 'Asia/Bahrain'), ('Asia/Baku', 'Asia/Baku'), ('Asia/Bangkok', 'Asia/Bangkok'), ('Asia/Barnaul', 'Asia/Barnaul'), ('Asia/Beirut', 'Asia/Beirut'), ('Asia/Bishkek', 'Asia/Bishkek'), ('Asia/Brunei', 'Asia/Brunei'), ('Asia/Calcutta', 'Asia/Calcutta'), ('Asia/Chita', 'Asia/Chita'), ('Asia/Choibalsan', 'Asia/Choibalsan'), ('Asia/Chongqing', 'Asia/Chongqing'), ('Asia/Chungking', 'Asia/Chungking'), ('Asia/Colombo', 'Asia/Colombo'), ('Asia/Dacca', 'Asia/Dacca'), ('Asia/Damascus', 'Asia/Damascus'), ('Asia/Dhaka', 'Asia/Dhaka'), ('Asia/Dili', 'Asia/Dili'), ('Asia/Dubai', 'Asia/Dubai'), ('Asia/Dushanbe', 'Asia/Dushanbe'), ('Asia/Famagusta', 'Asia/Famagusta'), ('Asia/Gaza', 'Asia/Gaza'), ('Asia/Harbin', 'Asia/Harbin'), ('Asia/Hebron', 'Asia/Hebron'), ('Asia/Ho_Chi_Minh', 'Asia/Ho_Chi_Minh'), ('Asia/Hong_Kong', 'Asia/Hong_Kong'), ('Asia/Hovd', 'Asia/Hovd'), ('Asia/Irkutsk', 'Asia/Irkutsk'), ('Asia/Istanbul', 'Asia/Istanbul'), ('Asia/Jakarta', 'Asia/Jakarta'), ('Asia/Jayapura', 'Asia/Jayapura'), ('Asia/Jerusalem', 'Asia/Jerusalem'), ('Asia/Kabul', 'Asia/Kabul'), ('Asia/Kamchatka', 'Asia/Kamchatka'), ('Asia/Karachi', 'Asia/Karachi'), ('Asia/Kashgar', 'Asia/Kashgar'), ('Asia/Kathmandu', 'Asia/Kathmandu'), ('Asia/Katmandu', 'Asia/Katmandu'), ('Asia/Khandyga', 'Asia/Khandyga'), ('Asia/Kolkata', 'Asia/Kolkata'), ('Asia/Krasnoyarsk', 'Asia/Krasnoyarsk'), ('Asia/Kuala_Lumpur', 'Asia/Kuala_Lumpur'), ('Asia/Kuching', 'Asia/Kuching'), ('Asia/Kuwait', 'Asia/Kuwait'), ('Asia/Macao', 'Asia/Macao'), ('Asia/Macau', 'Asia/Macau'), ('Asia/Magadan', 'Asia/Magadan'), ('Asia/Makassar', 'Asia/Makassar'), ('Asia/Manila', 'Asia/Manila'), ('Asia/Muscat', 'Asia/Muscat'), ('Asia/Nicosia', 'Asia/Nicosia'), ('Asia/Novokuznetsk', 'Asia/Novokuznetsk'), ('Asia/Novosibirsk', 'Asia/Novosibirsk'), ('Asia/Omsk', 'Asia/Omsk'), ('Asia/Oral', 'Asia/Oral'), ('Asia/Phnom_Penh', 'Asia/Phnom_Penh'), ('Asia/Pontianak', 'Asia/Pontianak'), ('Asia/Pyongyang', 'Asia/Pyongyang'), ('Asia/Qatar', 'Asia/Qatar'), ('Asia/Qostanay', 'Asia/Qostanay'), ('Asia/Qyzylorda', 'Asia/Qyzylorda'), ('Asia/Rangoon', 'Asia/Rangoon'), ('Asia/Riyadh', 'Asia/Riyadh'), ('Asia/Saigon', 'Asia/Saigon'), ('Asia/Sakhalin', 'Asia/Sakhalin'), ('Asia/Samarkand', 'Asia/Samarkand'), ('Asia/Seoul', 'Asia/Seoul'), ('Asia/Shanghai', 'Asia/Shanghai'), ('Asia/Singapore', 'Asia/Singapore'), ('Asia/Srednekolymsk', 'Asia/Srednekolymsk'), ('Asia/Taipei', 'Asia/Taipei'), ('Asia/Tashkent', 'Asia/Tashkent'), ('Asia/Tbilisi', 'Asia/Tbilisi'), ('Asia/Tehran', 'Asia/Tehran'), ('Asia/Tel_Aviv', 'Asia/Tel_Aviv'), ('Asia/Thimbu', 'Asia/Thimbu'), ('Asia/Thimphu', 'Asia/Thimphu'), ('Asia/Tokyo', 'Asia/Tokyo'), ('Asia/Tomsk', 'Asia/Tomsk'), ('Asia/Ujung_Pandang', 'Asia/Ujung_Pandang'), ('Asia/Ulaanbaatar', 'Asia/Ulaanbaatar'), ('Asia/Ulan_Bator', 'Asia/Ulan_Bator'), ('Asia/Urumqi', 'Asia/Urumqi'), ('Asia/Ust-Nera', 'Asia/Ust-Nera'), ('Asia/Vientiane', 'Asia/Vientiane'), ('Asia/Vladivostok', 'Asia/Vladivostok'), ('Asia/Yakutsk', 'Asia/Yakutsk'), ('Asia/Yangon', 'Asia/Yangon'), ('Asia/Yekaterinburg', 'Asia/Yekaterinburg'), ('Asia/Yerevan', 'Asia/Yerevan'), ('Atlantic/Azores', 'Atlantic/Azores'), ('Atlantic/Bermuda', 'Atlantic/Bermuda'), ('Atlantic/Canary', 'Atlantic/Canary'), ('Atlantic/Cape_Verde', 'Atlantic/Cape_Verde'), ('Atlantic/Faeroe', 'Atlantic/Faeroe'), ('Atlantic/Faroe', 'Atlantic/Faroe'), ('Atlantic/Jan_Mayen', 'Atlantic/Jan_Mayen'), ('Atlantic/Madeira', 'Atlantic/Madeira'), ('Atlantic/Reykjavik', 'Atlantic/Reykjavik'), ('Atlantic/South_Georgia', 'Atlantic/South_Georgia'), ('Atlantic/St_Helena', 'Atlantic/St_Helena'), ('Atlantic/Stanley', 'Atlantic/Stanley'), ('Australia/ACT', 'Australia/ACT'), ('Australia/Adelaide', 'Australia/Adelaide'), ('Australia/Brisbane', 'Australia/Brisbane'), ('Australia/Broken_Hill', 'Australia/Broken_Hill'), ('Australia/Canberra', 'Australia/Canberra'), ('Australia/Currie', 'Australia/Currie'), ('Australia/Darwin', 'Australia/Darwin'), ('Australia/Eucla', 'Australia/Eucla'), ('Australia/Hobart', 'Australia/Hobart'), ('Australia/LHI', 'Australia/LHI'), ('Australia/Lindeman', 'Australia/Lindeman'), ('Australia/Lord_Howe', 'Australia/Lord_Howe'), ('Australia/Melbourne', 'Australia/Melbourne'), ('Australia/NSW', 'Australia/NSW'), ('Australia/North', 'Australia/North'), ('Australia/Perth', 'Australia/Perth'), ('Australia/Queensland', 'Australia/Queensland'), ('Australia/South', 'Australia/South'), ('Australia/Sydney', 'Australia/Sydney'), ('Australia/Tasmania', 'Australia/Tasmania'), ('Australia/Victoria', 'Australia/Victoria'), ('Australia/West', 'Australia/West'), ('Australia/Yancowinna', 'Australia/Yancowinna'), ('Brazil/Acre', 'Brazil/Acre'), ('Brazil/DeNoronha', 'Brazil/DeNoronha'), ('Brazil/East', 'Brazil/East'), ('Brazil/West', 'Brazil/West'), ('CET', 'CET'), ('CST6CDT', 'CST6CDT'), ('Canada/Atlantic', 'Canada/Atlantic'), ('Canada/Central', 'Canada/Central'), ('Canada/Eastern', 'Canada/Eastern'), ('Canada/Mountain', 'Canada/Mountain'), ('Canada/Newfoundland', 'Canada/Newfoundland'), ('Canada/Pacific', 'Canada/Pacific'), ('Canada/Saskatchewan', 'Canada/Saskatchewan'), ('Canada/Yukon', 'Canada/Yukon'), ('Chile/Continental', 'Chile/Continental'), ('Chile/EasterIsland', 'Chile/EasterIsland'), ('Cuba', 'Cuba'), ('EET', 'EET'), ('EST', 'EST'), ('EST5EDT', 'EST5EDT'), ('Egypt', 'Egypt'), ('Eire', 'Eire'), ('Etc/GMT', 'Etc/GMT'), ('Etc/GMT+0', 'Etc/GMT+0'), ('Etc/GMT+1', 'Etc/GMT+1'), ('Etc/GMT+10', 'Etc/GMT+10'), ('Etc/GMT+11', 'Etc/GMT+11'), ('Etc/GMT+12', 'Etc/GMT+12'), ('Etc/GMT+2', 'Etc/GMT+2'), ('Etc/GMT+3', 'Etc/GMT+3'), ('Etc/GMT+4', 'Etc/GMT+4'), ('Etc/GMT+5', 'Etc/GMT+5'), ('Etc/GMT+6', 'Etc/GMT+6'), ('Etc/GMT+7', 'Etc/GMT+7'), ('Etc/GMT+8', 'Etc/GMT+8'), ('Etc/GMT+9', 'Etc/GMT+9'), ('Etc/GMT-0', 'Etc/GMT-0'), ('Etc/GMT-1', 'Etc/GMT-1'), ('Etc/GMT-10', 'Etc/GMT-10'), ('Etc/GMT-11', 'Etc/GMT-11'), ('Etc/GMT-12', 'Etc/GMT-12'), ('Etc/GMT-13', 'Etc/GMT-13'), ('Etc/GMT-14', 'Etc/GMT-14'), ('Etc/GMT-2', 'Etc/GMT-2'), ('Etc/GMT-3', 'Etc/GMT-3'), ('Etc/GMT-4', 'Etc/GMT-4'), ('Etc/GMT-5', 'Etc/GMT-5'), ('Etc/GMT-6', 'Etc/GMT-6'), ('Etc/GMT-7', 'Etc/GMT-7'), ('Etc/GMT-8', 'Etc/GMT-8'), ('Etc/GMT-9', 'Etc/GMT-9'), ('Etc/GMT0', 'Etc/GMT0'), ('Etc/Greenwich', 'Etc/Greenwich'), ('Etc/UCT', 'Etc/UCT'), ('Etc/UTC', 'Etc/UTC'), ('Etc/Universal', 'Etc/Universal'), ('Etc/Zulu', 'Etc/Zulu'), ('Europe/Amsterdam', 'Europe/Amsterdam'), ('Europe/Andorra', 'Europe/Andorra'), ('Europe/Astrakhan', 'Europe/Astrakhan'), ('Europe/Athens', 'Europe/Athens'), ('Europe/Belfast', 'Europe/Belfast'), ('Europe/Belgrade', 'Europe/Belgrade'), ('Europe/Berlin', 'Europe/Berlin'), ('Europe/Bratislava', 'Europe/Bratislava'), ('Europe/Brussels', 'Europe/Brussels'), ('Europe/Bucharest', 'Europe/Bucharest'), ('Europe/Budapest', 'Europe/Budapest'), ('Europe/Busingen', 'Europe/Busingen'), ('Europe/Chisinau', 'Europe/Chisinau'), ('Europe/Copenhagen', 'Europe/Copenhagen'), ('Europe/Dublin', 'Europe/Dublin'), ('Europe/Gibraltar', 'Europe/Gibraltar'), ('Europe/Guernsey', 'Europe/Guernsey'), ('Europe/Helsinki', 'Europe/Helsinki'), ('Europe/Isle_of_Man', 'Europe/Isle_of_Man'), ('Europe/Istanbul', 'Europe/Istanbul'), ('Europe/Jersey', 'Europe/Jersey'), ('Europe/Kaliningrad', 'Europe/Kaliningrad'), ('Europe/Kiev', 'Europe/Kiev'), ('Europe/Kirov', 'Europe/Kirov'), ('Europe/Lisbon', 'Europe/Lisbon'), ('Europe/Ljubljana', 'Europe/Ljubljana'), ('Europe/London', 'Europe/London'), ('Europe/Luxembourg', 'Europe/Luxembourg'), ('Europe/Madrid', 'Europe/Madrid'), ('Europe/Malta', 'Europe/Malta'), ('Europe/Mariehamn', 'Europe/Mariehamn'), ('Europe/Minsk', 'Europe/Minsk'), ('Europe/Monaco', 'Europe/Monaco'), ('Europe/Moscow', 'Europe/Moscow'), ('Europe/Nicosia', 'Europe/Nicosia'), ('Europe/Oslo', 'Europe/Oslo'), ('Europe/Paris', 'Europe/Paris'), ('Europe/Podgorica', 'Europe/Podgorica'), ('Europe/Prague', 'Europe/Prague'), ('Europe/Riga', 'Europe/Riga'), ('Europe/Rome', 'Europe/Rome'), ('Europe/Samara', 'Europe/Samara'), ('Europe/San_Marino', 'Europe/San_Marino'), ('Europe/Sarajevo', 'Europe/Sarajevo'), ('Europe/Saratov', 'Europe/Saratov'), ('Europe/Simferopol', 'Europe/Simferopol'), ('Europe/Skopje', 'Europe/Skopje'), ('Europe/Sofia', 'Europe/Sofia'), ('Europe/Stockholm', 'Europe/Stockholm'), ('Europe/Tallinn', 'Europe/Tallinn'), ('Europe/Tirane', 'Europe/Tirane'), ('Europe/Tiraspol', 'Europe/Tiraspol'), ('Europe/Ulyanovsk', 'Europe/Ulyanovsk'), ('Europe/Uzhgorod', 'Europe/Uzhgorod'), ('Europe/Vaduz', 'Europe/Vaduz'), ('Europe/Vatican', 'Europe/Vatican'), ('Europe/Vienna', 'Europe/Vienna'), ('Europe/Vilnius', 'Europe/Vilnius'), ('Europe/Volgograd', 'Europe/Volgograd'), ('Europe/Warsaw', 'Europe/Warsaw'), ('Europe/Zagreb', 'Europe/Zagreb'), ('Europe/Zaporozhye', 'Europe/Zaporozhye'), ('Europe/Zurich', 'Europe/Zurich'), ('GB', 'GB'), ('GB-Eire', 'GB-Eire'), ('GMT', 'GMT'), ('GMT+0', 'GMT+0'), ('GMT-0', 'GMT-0'), ('GMT0', 'GMT0'), ('Greenwich', 'Greenwich'), ('HST', 'HST'), ('Hongkong', 'Hongkong'), ('Iceland', 'Iceland'), ('Indian/Antananarivo', 'Indian/Antananarivo'), ('Indian/Chagos', 'Indian/Chagos'), ('Indian/Christmas', 'Indian/Christmas'), ('Indian/Cocos', 'Indian/Cocos'), ('Indian/Comoro', 'Indian/Comoro'), ('Indian/Kerguelen', 'Indian/Kerguelen'), ('Indian/Mahe', 'Indian/Mahe'), ('Indian/Maldives', 'Indian/Maldives'), ('Indian/Mauritius', 'Indian/Mauritius'), ('Indian/Mayotte', 'Indian/Mayotte'), ('Indian/Reunion', 'Indian/Reunion'), ('Iran', 'Iran'), ('Israel', 'Israel'), ('Jamaica', 'Jamaica'), ('Japan', 'Japan'), ('Kwajalein', 'Kwajalein'), ('Libya', 'Libya'), ('MET', 'MET'), ('MST', 'MST'), ('MST7MDT', 'MST7MDT'), ('Mexico/BajaNorte', 'Mexico/BajaNorte'), ('Mexico/BajaSur', 'Mexico/BajaSur'), ('Mexico/General', 'Mexico/General'), ('NZ', 'NZ'), ('NZ-CHAT', 'NZ-CHAT'), ('Navajo', 'Navajo'), ('PRC', 'PRC'), ('PST8PDT', 'PST8PDT'), ('Pacific/Apia', 'Pacific/Apia'), ('Pacific/Auckland', 'Pacific/Auckland'), ('Pacific/Bougainville', 'Pacific/Bougainville'), ('Pacific/Chatham', 'Pacific/Chatham'), ('Pacific/Chuuk', 'Pacific/Chuuk'), ('Pacific/Easter', 'Pacific/Easter'), ('Pacific/Efate', 'Pacific/Efate'), ('Pacific/Enderbury', 'Pacific/Enderbury'), ('Pacific/Fakaofo', 'Pacific/Fakaofo'), ('Pacific/Fiji', 'Pacific/Fiji'), ('Pacific/Funafuti', 'Pacific/Funafuti'), ('Pacific/Galapagos', 'Pacific/Galapagos'), ('Pacific/Gambier', 'Pacific/Gambier'), ('Pacific/Guadalcanal', 'Pacific/Guadalcanal'), ('Pacific/Guam', 'Pacific/Guam'), ('Pacific/Honolulu', 'Pacific/Honolulu'), ('Pacific/Johnston', 'Pacific/Johnston'), ('Pacific/Kiritimati', 'Pacific/Kiritimati'), ('Pacific/Kosrae', 'Pacific/Kosrae'), ('Pacific/Kwajalein', 'Pacific/Kwajalein'), ('Pacific/Majuro', 'Pacific/Majuro'), ('Pacific/Marquesas', 'Pacific/Marquesas'), ('Pacific/Midway', 'Pacific/Midway'), ('Pacific/Nauru', 'Pacific/Nauru'), ('Pacific/Niue', 'Pacific/Niue'), ('Pacific/Norfolk', 'Pacific/Norfolk'), ('Pacific/Noumea', 'Pacific/Noumea'), ('Pacific/Pago_Pago', 'Pacific/Pago_Pago'), ('Pacific/Palau', 'Pacific/Palau'), ('Pacific/Pitcairn', 'Pacific/Pitcairn'), ('Pacific/Pohnpei', 'Pacific/Pohnpei'), ('Pacific/Ponape', 'Pacific/Ponape'), ('Pacific/Port_Moresby', 'Pacific/Port_Moresby'), ('Pacific/Rarotonga', 'Pacific/Rarotonga'), ('Pacific/Saipan', 'Pacific/Saipan'), ('Pacific/Samoa', 'Pacific/Samoa'), ('Pacific/Tahiti', 'Pacific/Tahiti'), ('Pacific/Tarawa', 'Pacific/Tarawa'), ('Pacific/Tongatapu', 'Pacific/Tongatapu'), ('Pacific/Truk', 'Pacific/Truk'), ('Pacific/Wake', 'Pacific/Wake'), ('Pacific/Wallis', 'Pacific/Wallis'), ('Pacific/Yap', 'Pacific/Yap'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('ROC', 'ROC'), ('ROK', 'ROK'), ('Singapore', 'Singapore'), ('Turkey', 'Turkey'), ('UCT', 'UCT'), ('US/Alaska', 'US/Alaska'), ('US/Aleutian', 'US/Aleutian'), ('US/Arizona', 'US/Arizona'), ('US/Central', 'US/Central'), ('US/East-Indiana', 'US/East-Indiana'), ('US/Eastern', 'US/Eastern'), ('US/Hawaii', 'US/Hawaii'), ('US/Indiana-Starke', 'US/Indiana-Starke'), ('US/Michigan', 'US/Michigan'), ('US/Mountain', 'US/Mountain'), ('US/Pacific', 'US/Pacific'), ('US/Samoa', 'US/Samoa'), ('UTC', 'UTC'), ('Universal', 'Universal'), ('W-SU', 'W-SU'), ('WET', 'WET'), ('Zulu', 'Zulu')], default='UTC', max_length=50),
        ),
        migrations.AlterField(
            model_name='system_settings',
            name='url_prefix',
            field=models.CharField(blank=True, default='', help_text="URL prefix if DefectDojo is installed in it's own virtual subdirectory.", max_length=300),
        ),
        migrations.AlterField(
            model_name='testing_guide',
            name='how_to_test',
            field=models.TextField(default=None, help_text='How to test the objective'),
        ),
        migrations.AlterField(
            model_name='testing_guide',
            name='identifier',
            field=models.CharField(blank=True, help_text='Test Unique Identifier', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='testing_guide',
            name='name',
            field=models.CharField(help_text='Name of the test', max_length=400),
        ),
        migrations.AlterField(
            model_name='testing_guide',
            name='objective',
            field=models.CharField(help_text='Objective of the test', max_length=800),
        ),
        migrations.AlterField(
            model_name='testing_guide',
            name='results_expected',
            field=models.CharField(help_text='What the results look like for a test', max_length=800),
        ),
        migrations.AlterField(
            model_name='testing_guide',
            name='summary',
            field=models.CharField(help_text='Summary of the test', max_length=800),
        ),
        migrations.AlterField(
            model_name='tool_configuration',
            name='api_key',
            field=models.CharField(blank=True, max_length=600, null=True, verbose_name='API Key'),
        ),
        migrations.AlterField(
            model_name='tool_configuration',
            name='auth_title',
            field=models.CharField(blank=True, max_length=200, null=True, verbose_name='Title for SSH/API Key'),
        ),
        migrations.AlterField(
            model_name='tool_configuration',
            name='authentication_type',
            field=models.CharField(blank=True, choices=[('API', 'API Key'), ('Password', 'Username/Password'), ('SSH', 'SSH')], max_length=15, null=True),
        ),
        migrations.AlterField(
            model_name='tool_product_history',
            name='succesfull',
            field=models.BooleanField(default=True, verbose_name='Succesfully'),
        ),
        migrations.AlterField(
            model_name='usercontactinfo',
            name='block_execution',
            field=models.BooleanField(default=False, help_text="Instead of async deduping a finding the findings will be deduped synchronously and will 'block' the user until completion."),
        ),
        migrations.AlterField(
            model_name='usercontactinfo',
            name='cell_number',
            field=models.CharField(blank=True, help_text="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", max_length=15, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')]),
        ),
        migrations.AlterField(
            model_name='usercontactinfo',
            name='phone_number',
            field=models.CharField(blank=True, help_text="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", max_length=15, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')]),
        ),
        migrations.AlterField(
            model_name='usercontactinfo',
            name='slack_username',
            field=models.CharField(blank=True, help_text='Email address associated with your slack account', max_length=150, null=True, verbose_name='Slack Email Address'),
        ),
        migrations.AlterField(
            model_name='va',
            name='address',
            field=models.TextField(default='none', editable=False),
        ),
    ]
